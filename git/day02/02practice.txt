
브랜치의 이동만으로 해당 코드로 이동이 가능하다
ex) 브랜치명이 feat/login 브랜치와 dev 라는 브랜츠가 있다
    -> git checkout feat/login 과 git checkout dev 로 브랜치를 자유롭게 왔다갔다하면서 개발을 할 수가 있다.
        (브랜치명은 마음대로 작성해도 된다  *팀원간 컨벤션을 정해서 사용)

    -> 즉 분기라는 말은 코드를 버전별로 따로따로 보관할 수 있다는 말이다.
    -> 버그가 발생했을 떄 브랜치로 이동하면서 버그를 고치면 된다.
    -> '복사본 만들기' 이렇게 이해하면 쉽다. -> 여러명에서 동시에 개발이 가능하다.

브랜치 생성 명령어 -> git branch 브랜치명
브랜치 이동 명령어 -> git checkout 브랜치명
브랜치 생성과 이동 명령어 -> git checkout -b 브랜치명
생성한 브랜치 확인하는 명령어 -> git branch
브랜치 삭제 명령어 -> git branch -D 브랜치명

내가 push 나 pull 을 받아야하는 경우가 있음
-> 이때 "브랜치명이 일치" 하는지 반드시 확인해야한다. ( git branch로 현재 내 브랜치명 확인 필수 )


------------------------------------------------------------

관련없는 히스토리가 있을 때

push 하기전 pull 받아야됨 -> git pull 별명 브랜치명
-> 이렇게 하면 pull 받을 때 ' 관련 없는 커밋이야 ' 이런 말이 뜬다
-> 이때는 git pull 별명 브랜치명 --rebase (a,b 를 내역 없이 합치겠다는 뜻) (git pull 별명 브랜치명 --allow-unrelated-histories)


------------------------------------------------------------

git flow

먼저 첫번째는 main 이나 dev 브랜치가 (default branch) 있을 것이다.
-> main 이나 dev 브랜치에서 새로운 브랜치 생성을 한다. ex) (style/login) 이런식으로
-> 그리고 개발이 끝나면 github 에 style/login 브랜치를 올린다 (코드 공유, dev나 main에 바로 합치는 것이 아니다)
-> 그럼 이제 github 에서 pull-request 를 통해서 dev 브랜치에 merge 를 요청하면 된다 (내가 개발한 기능을 합치는 것을 요청하는 과정이다)
-> 이제 팀원들이 code review 라는 과정을 거쳐서 내 코드를 dev 브랜치에 병합해도 되는지 리뷰를 남긴다. -> 수정 과정을 거친다.
-> 수정을 거친 후에 approve(승인)이 되면 코드를 merge 한다 (dev 와 style/login 코드를 병합하는 과정)

* merge도 순탄치만은 않다 -> 과정을 거쳐야만 한다
    ex) 내가 style/login 을 dev 라는 브랜치에 합치려고 한다 -> 하지만 내가 style/login 을 개발하는 동안 팀원들은 feat/... , style/... 등등 더 빠르게 개발하고
    dev에 부여했을 수도 있다 -> 여기서 코드가 겹치거나 다르면 오류가 날 수 있다 -> 그래서 github는 수정한 내용만 코드를 바꿔줍니다.

    원래 존재하던 브랜치 (merge 해야하는) 와 여러분이 생성한 브랜치를 비교해준다
    ex) 너 이런이런 부분 바꼈어

    -> 충돌된 내용이 없다면 merge 가 가능하지만, 충돌이 있다면 해결 후 merge 해야한다.

    * git flow 를 큰 틀로 보자면
        기준 브랜치  ->  새로운 브랜치 생성  ->  개발  ->  합병요청  ->  리뷰  ->  수정  ->  합병  ->  충돌 해결  ->  합병 완료


------------------------------------------------------------

** 오너가 오거나이제이션 하는 방법 (오너가 해야하는 역할)

1. 오거나이제이션 하는 법 (보통 팀원의 조장이 한다) 이름 수정 안되니 고민해서 이름 짓기
    github -> your organization -> 오른쪽 상단에 new organization -> free 로 실행 -> 
    -> 회사가 아니면 personal account 체크 -> add on 체크하지 말고 next 눌러서 생성 -> 다음 거 무시하고 complete 눌러서 생성
    -> 오거나이제이션 생성 완료

2. 오거나이제이션 초대하는 법
    -> organization 에서 상단에 people 클릭 -> 오른쪽 상단에 invite member 클릭
    -> 초대할 사람 메일이나 이름을 치고 member 권한으로 초대를 하면 된다

3. 레포지토리 만들기
    -> 초대가 모두 완료되었다면 상단에 레포지토리 클릭 -> new repository
    -> README file 없이 생성 (뭐 해도 상관없지만, 체크 안해주면 커밋내역이 없기 때문에 바로 올라간다 *pull rebase 같은 거 안해줘도 됨)
    ->레포지토리 생성 완료

4. 터미널로 가서 파일 명 정하고 (cd 파일명) git 등록하는 거 그대로 진행하면 파일이 올라간다.

5. 팀원들에게 권한을 부여해주는 것
    * 첫번째 방법
        오거나이제이션 -> 레포지토리 카테고리 내의 레포지토리 -> 상단에 settings -> 왼쪽에 Collaborators and teams
        -> Add people 로 팀원 이름 적어서 권한을 부여해줄 수 있다

    * 두번째 방법
        오거나이제이션 -> 상단에 people -> Owner로 바꿀사람 ... 누르고 change role 누르고 권한 부여해주면 된다


------------------------------------------------------------

** (팀원 사람들이 해야하는 역할)

1. git clone 레포지토리주소 -> 이러면 오너가 생성한 새로운 폴더가 생긴다 (remote 까지는 모두 되어있는 상태)

2. 새로운 브랜치를 생성해준다 -> git checkout -b 'feat/ooo' -> 그리고 clone 했을 때 생겨난 파일을 수정 (오류 확인을 위해 다 같은 곳을 수정해보기)

3. 커밋 메세지의 컨벤션을 정한다 (git commit -m '커밋메세지')
    "feat : 로그인 기능을 추가하였습니다"
    (특정 기능을 업데이트 했을 때 많이 쓰임)

    "fix : 로그인이 되지 않았던 오류를 수정하였습니다"
    (버그를 수정할 때 많이 쓰임)

    "chore : 잡다한 일을 추가했을 때"

    "refactor : 리팩터링"
    (들어가고 나가는 값이 같은 거의 안에 있는 코드를 개선하는 것)

    "docs : 문서"
    (README.md 등 문서를 수정할 때)

    "style, ui 등 같이 마음대로 컨벤션을 정해줘도 된다"


4. 위 과정들을 모두 해줬다면
    -> git add . -> git push 별명 브랜치명

5. github 에서 상단에 Pull requests 들어간 후에 New pull request 누른다 -> 왼쪽 상단에 compare 눌러서 메인브랜치와 비교할 브랜치를 정해준다
    -> 코드들을 비교, 바뀐 것들을 확인해보고 Create pull request 클릭 -> Create pull request -> PR 생성 완료

6. 다른 사람 거 PR 들어간다 -> Files changed 클릭 -> 이제 여기서 코드에 대한 리뷰를 남길 수 있다 (마크다운 언어로 작성 가능)
    코드 남기기 :
    '''suggestion
    <h2>안녕하세요 김준석입니다.</h2>
    '''
    -> 코드 리뷰에 대한 내용을 모두 적었다면 우측 상단에 Finish your review 클릭 -> 코멘트, 승인, 변화요청 등 체크하고 Submit review 클릭
    -> 리뷰 완료 (팀원들이 approval 을 해야한 merge 할 수 있다)

(closed 가 됐으면 merge 가 됐다는 뜻)
7. 충돌될 내용이 있어서 merge 가 안된다면 -> Resolve conflicts 클릭 -> 충돌이 난 코드들을 비교 -> 간단한 코드라면 다른거, 추가해야될 거 코드 변형
    -> 우측 상단에 Mark as resolve 누르고 Commit merge 클릭 -> 병합 완료

* 7번 처럼 간단한 코드들은 github에서 수정해주면 되지만, 그게 아니라면 8번 처럼 vscode 내에서 병합

* vscode 내에서 병합하는 방법 ->
8. git checkout 브랜치명 -> 가장 최신의 코드가 있는 브랜치로 이동

9. 가장 최신의 코드로 동기화 시켜줘야한다 -> git pull 별명 브랜치명
    -> 여기서 동기화 시켜준 코드에 수정사항이 있으면 다시 다른 브랜치로 이동해줄 수 없다
    -> 새로운 commit 을 만들어주거나, stash를 사용함

10. git stash -> 수정 전으로 돌아감(임시저장)
    git stash pop -> 다시 원래대로 돌아감
    브랜치 이동으로 병렬 개발을 할 수 있다
    ex) git checkout main 과 git checkout feat/ooo 같은 식으로 브랜치를 왔다 갔다 할 수 있다

11. git merge main (내 브랜치와 기존의 메인 브랜치를 병합해주는 것)

12. 충돌난 것을 모두 수정해준다

13. git add .

14. git merge --continue

15. 이제 merge 어떻게 됐는지 내용이 나온다, :q 해주고 나가면 된다

16. git push 별명 병합할브랜치명 -> 이러면 main(기존 브렌치)에 병합

17. github 에서 pull request 들어가면 병합할 내용이 들어가있다 -> 들어가서 merge 불 들어와있으면 두번 누르면 된다 -> merge 완료

18. 오거나이제이션에서 레포지토리 들어가면 커밋내역 횟수와 내용을 확인할 수 있다


------------------------------------------------------------

소스제어


