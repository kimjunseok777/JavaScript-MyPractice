
git 설지
github 회원가입
github 저장소 생성
내 컴퓨터에 github email, name을 등록

--------------------------------------------------------------

최초 커밋
로컬저장소와 원격저장소를 분리해서 생각

로컬저장소  - (내컴퓨터)
원격저장소 - (github)

디렉토리 선택  --> 선택 잘못하면 상위폴더에 .git 이 생김 / 하위폴더에 .git 이 생김

cd 폴더명 --> 하위폴더 이동
cd..  -->  상위 폴더
cd 경로  -->  해당 경로

로컬 저장소 생성  ->  git init (.git)
내가 저장하고 싶은 파일을 선택  ->  git add 파일명 (이렇게 올리는 경우는 거의 없다)
                                                    ->  git add .

로컬 저장소에 히스토리를 저장  -->  git commit -m '메세지'

로컬 저장소와 원격 저장소를 연결  -->  git remote add [별명] [주소]

원격 저장소에 로컬 저장소에 저장된 코드를 공유  ->  git push [별명] [브랜치명]

*주의사항
브랜치, 관련 없는 히스토리 내역

브랜치는 언제 생성해야하는가?
v0.1 -> v0.2  ->  기능개발 해야됨  ->  (feat/login)
v0.2 -> 버그가 발생할 수 있음  ->  디버깅 이라는 걸 해야함  ->  오류를 찾는 과정
->  v0.2 코드는 보존되어 있기 때문에  ->  브랜치 이동만으로 해당 코드로 디버깅이 가능(옛날 코드로 돌아갈 수 있다)

브랜치 생성 -> git branch 브랜치명
브랜치 이동 -> git checkout 브랜치명
생성과 이동 -> git checkout -b 브랜치명

내가 push 및 pull을 받아야하는 경우가 있음
브랜치명이 일치하는지 반드시 확인해야함

1. vscode 우측 하단의 분기명을 확인
2. git branch  -->  현재 활성화 된 브랜치에 하이라이트

--------------------------------------------------------------

관련없는 히스토리

push --> ? 너 푸쉬하기 전에 pull 을 받아... 라는 명령어 뜸  -->  git pull 별명 브랜치명
    -->  관련 없는 커밋이야  -->  git pull 별명 브랜치명 --rebase (a, b를 내역 없이 합치겠다)
    --> 정석으로 쓰는 것은  git pull 별명 브랜치명 --allow-unrelated-histories

--------------------------------------------------------------

git flow

main, dev (default branch)
--> dev --> branch 생성 (style/login) -> 개발 -> github style/login branch 코드 공유
-> github pull-request를 통해 dev에 merge 요청
-> code review -> 수정 -> 재요청(안하는 경우도 있음) -> approve(승인) -> merge(dev - feat/login)


code review
    1. CTO 총괄 리뷰
    2. 팀원 리뷰
    3. 코드 리뷰 마니또
    4. 리뷰 하지 않는 것


code conflict
    style/login - dev
    깃허브는 똑똑함 -> 수정을 했으면 수정한 내용만 코드를 바꿔줍니다 여러분이 생성한 브랜치와 비교

    dev 브랜치에 다른 개발자들의 코드가 섞여있는 상태, 다시 한번 비교
    충돌된 내용이 없다면 merge가 가능하지만, 충돌된 내용이 있다면 해결 후 merge


기준 브랜치 -> 브랜치 생성 -> 개발 -> 합명 요청 -> 리뷰 -> 수정 -> 합병 -> 충돌 해결 -> 합병

--------------------------------------------------------------

페어 1분이 오거나이제이션 오너, 나머지 분은 맴버

--------------------------------------------------------------

"feat : 로그인 기능을 추가하였습니다"
[특정 기능]

"fix : 로그인이 되지 않았던 오류를 수정하였습니다"
[버그 수정]

"chore : 잡다한 일"

"refactor : 리팩터링"

"docs : 문서"

"style, ui"

--------------------------------------------------------------

1. merge 다시 한번 복습 + 정리
2. 깃허브 pages 정적 호스팅
3. 깃 convention -> PullRequest
4. git revert, amend

--------------------------------------------------------------