이력서를 작성할 때는 여러분들의 개발자로서의 "가치관" 이 들어가야 한다.
이력서에서 '신뢰' 라는 것을 얻어야 한다.


------------------------------------------------------------------------------------------------------------------------

day03 은 git 복습 위주의 수업

** 최초 커밋시 진행하는 과정

1. 로컬 저장소 생성   code ) git init

2. 코드를 개발 -> 로컬 저장소에 저장   code ) git add / git commit -m

3. 깃허브에 원격저장소 생성   code ) New repository

4. 로컬저장소와 원격저장소를 연결   code ) git remote add

5. 로컬 저장소에 있는 코드를 원격 저장소에 저장   code ) git push

----------------------------------------------------

** 최초 커밋 이후, 혼자일때

1. 로컬저장소가 생성된 폴더에서 개발을 진행

2. 로컬저장소에 저장   code ) add / commit / push

----------------------------------------------------

** 최초 커밋 이후, 팀일때

1. 팀원은 생성된 레포지토리 주소를 클론해야한다   code ) git clone

2. 팀원은 각자 분배받은 테스크에 따라 분기를 생성   code ) git brach / git checkout

3. 각자 생성한 분기에서 개발을 진행   code ) add / commit / push -> (중요한건 push 할 때 원본 브랜치가 아닌, " 내가 만든 브랜치 " 에 푸시)
    -> 개발후 푸시할때 : 로컬저장소에 저장 -> 원격저장소에 저장(내가 만든 분기에 저장)

4. 원격저장소에서 분기가 생성되었던 원래 분기에 합병 요청   (github 에서 Pull request 요청)

5. 팀원끼리 합병할 코드 리뷰 : 발견하지 못했던 예외 사항을 발견하기 위함, 팀원 간 코드 맥락의 공유를 위함

6. 코드 리뷰를 진행하게 되면 승인이 되거나 수정 요청이 나오게 된다 -> 수정 진행 -> 수정이 끝났다면 합병을 진행

7. 합병 시 충돌이 발생할 수 있음 (팀원이 동일한 부분을 수정했을 경우 발생) -> 해결을 해야함

8. 원격 저장소 (깃허브) 웹사이트 내에서 해결이 가능
    -> 너무 수정할 곳이 많으면 vscode 같은 편집기를 이용해서 직접 수정

9. 합병 해야하는 브랜치 (dev) 와 내가 개발을 진행한 브랜치 (feat/ooo) 를 병합해야하는데,
    현재 내가 가진 dev 브랜치가 가장 최신의 것이 아니라면 가장 최신의 상태로 동기화 시켜줘야 한다
    (아마 최신의 것이 아닐 거다)
        code ) 여러분의 코드가 feat/ooo 이라면 -> git checkout main 으로 이동 -> git pull origin main 으로 동기화
            -> 그리고 다시 내 브랜치로 이동  code ) git checkout feat/ooo -> git merge main

10. 코드가 동기화 됐다면, 합병 명령어를 통해 편집툴 (vscode) 에서 코드 합병 후 코드를 다시 원격저장소에 저장
    code ) git add  ->  git merge --continue  ->  git push origin feat/ooo  ->  합병 완료



------------------------------------------------------------------------------------------------------------------------

day03 : merge 다시 한번 복습  /  깃허브 pages 정적 호스팅  /  Pull request Template

로컬 브랜치명을 지웠다고 해서 원격 저장소의 올린 코드가 사라지지 않는다.
    -> 그래서 개발이 완료되면 your organization -> repository -> 사용하고 있는 레포지토리
    -> 왼쪽 상단에 브랜치에서 View all branches 클릭 -> your branches 에서 내가 개발이 완료된 (merge 완료한) 브랜치들 삭제
        (Active branches 는 손대면 완됨)
    -> your branches 에서 초록색 아이콘은 아직 진행 중이라는 뜻, 보라색 아이콘은 merge 가 되었다는 뜻


----------------------------------------------------

소스제어 : 터미널에서 명령어를 치지 않아도 add, commit, push ... 등을 할 수 있는 UI 도구이다.
    -> 변경된 거 확인한 후에 변경 내용 스테이징 (+버튼) 을 누르고 상단에 커밋메세지 적고 커밋버튼 누르면 커밋 됨
    -> 커밋 메세지 적을 때 엔터 두번 해서 줄 내리면 바디까지 적을 수 있음
    -> 커밋 버튼 누르고, 그리고 한번 더 게시 버튼 누르면 push 까지 끝난 거다 -> 그리고 PR 해주면 된다
    
    * 반드시 git 은 터미널로 먼저 확실하게 익숙해지고, 그 후에 작업할 때 생산성을 위해서 소스제어를 사용해라
        -> 소스제어로 먼저 익숙해지면 안됨


----------------------------------------------------

프로젝트 (포트폴리오 제작) 를 제작, 경험할 수 있는 방법은 정말 많다 (외부에서 프로젝트를 할 수 있는 공간이 정말 많다)
    -> HOLA (프로젝트 모집 사이트)
    -> LET'SPL (렛플 : 프로젝트 / 네트워킹 / 스터디 모임)
    -> careerly (커리어리 : 개발자들 커뮤니티 / 프로젝트)

    ==> 회사 창업을 하고 싶은데 돈이 없을 때, 이런 식으로 사이드 프로젝트들을 활용한다
            (개시자 (창업자) 는 사이드 프로젝트 챙기고, 나는 협업 포트폴리오와 MVP 를 챙길 수 있다 -> win win)
                -> 이렇게 하면 물론 코드의 퀄리티가 떨어진다, BUT 투자 받으면 (like 엔젤 투자) 그때 채용해서 코드 다시 처음부터 만들면 됨
                -> 엔젤투자와 씨드투자는 사람을 믿고 투자한다 (여러분들의 프로덕트를 믿고 투자하지 않는다) -> 말만 잘하면 투자해줌
                -> BUT 그 다음 투자 라운드는 10억대로 올라가기 때문에 '지표' 란 게 있어야 한다
                    ex) 내가 이걸로 수익을 창출했다는 ' 지표 ' 란 것이 필요하다



----------------------------------------------------

깃허브 정적 페이지 등록하는 법
    -> cd 경로로 등록할 패키지로 이동 -> 깃허브에 뉴 레포지토리 생성 -> git init 으로 로컬저장소 생성
    -> 원격 저장소와 로컬 저장소 연결 (remote) -> add / commit / push -> 깃허브에서 레포지토리 클릭
    -> 상단에 settings 클릭 -> 왼쪽 카테고리에 pages -> Deploy from a branch 선택 -> 브랜치 none 에서 main 으로 변경
    -> save 누르면 배포 끝 (링크 상단에 안 뜨면 새로고침하고 Visite site 누르면 확인 가능)


