개발자로 취업을 하려 한다면 취업 전에는, 최소 6개월 정도의 잔디가 심겨져 있으면 좋다


git :
      코드 버전 관리 시스템중 하나이다
      ==> 코드의 히스토리를 관리(보관)하겠다는 이야기 (내 코드가 어떻게 변했는지)
      >> 코드를 다른사람들과 공유할 수 있고, 내가 예전에 썼던 코드들도 불러올 수가 있다

      1. 히스토리 보관 (버전관리)
            왜 보관해야 하는가? --> 만약 필요 없는 코드를 삭제 --> 근데 다시 필요해짐 --> 이전 코드를 참고할 수 있다는 점이 있다는
                                                                                                                                          (내 코드가 사라지지 않음)
            --> 버전 관리의 필요성 --> 버전 업데이트 후 롤백할 수 있다 --> 히스토리를 보관해야할 필요가 있다

            --> 협업 시 팀원이 이해할 수 있는 코드의 최소화


      2. 팀원 간의 코드 공유
            --> 모든 사람과 내 코드를 공유하는 것(오픈 소스)  --> 이것은 "원격 저장소"인 "git-hub" 를 통해서 공유할 수 있다
            --> 세상에서 가장 큰 개발 커뮤니티 (개발자들의 소통공간) > (하루하루 개발한 거 올리면 잔디심기 할 수 있음)


      3. 이슈 트래킹 ( ex> 내가 이런 이슈가 왜생겼지? 도와주세요) -> 리뷰를 통해 도움을 받을 수 있다


      4. 리뷰를 통한 개발 문화와 엣지 케이스 발견


-----------------------------------------------------------------------------------------------


github
https://github.com/

      git 으로 관리된 코드를 웹 사이트(UI)에 공유하여 보다 편리하게 코드를 관리하고 리뷰할 수 있는 사이트
      (우리 회사사람들이나 전세계에 있는 모든 사람들과 공유할 수 있는 사이트)


-----------------------------------------------------------------------------------------------

git
https://git-scm.com/downloads

      내 컴퓨터에 내가 설치해서 내 컴퓨터에서 코드를 관리 (로컬-저장소)
      -> 다른사람이 내 컴퓨터에 접속하지 못하면 내 코드를 볼 수 없음

      명령 프롬프트  >  git --version

      1일 1커밋 해줘


-----------------------------------------------------------------------------------------------


github-flow (git-flow)

      1. 내가 코드를 올리고 싶은  "패키지"(폴더) 를 선택하는 것이 가장 중요  >  (ex> 현재 텍스트 파일 올리고 싶으면 큰 틀의 패키지, 즉 git의 day01 폴더를 한 패키지로 보면 된다)

      2. 아무것도 저장이 되어있지 않을 때는 저장 공간 생성 (로컬저장소) -> git init
      -> 저장 되어있을 때는 git add 부터 시작하면 된다

      3. 선택한 패키지에서 내가 저장하고 싶은 파일을 선택 --> 준비시킴(스테이징)
            git add 파일명 (특정 파일) - (폴더 개념과, 파일 개념 구분) - (폴더 = 패키지)
            git add . (패키지 내 같은 경로에 있는 모든 파일) -> 보통은 전체 다 올리기 때문에 add 닷 하는 경우가 더 많다 -> ex) css 선택 후 add . 하면 day01~day07 전체

      4. 로컬 저장소에 준비된 파일을 저장 (커밋)
            git commit -m  "커밋 메세지(헤더)" -m "커밋 메세지(본문)" -m "커밋 메세지(각주)"

      5. 커밋 내역을 확인할 수 있음
            git log

      6. 원격 저장소 (github) 생성 -- (만약에 생성이 되어있다면 생략)

      7. 원격 저장소와 로컬 저장소를 연결
            git remote add 원격저장소명(보통 origin 이라 많이 씀) 원격저장소-주소(https://github.com/kimjunseok777/test.git) - (등록할 레포지토리 주소)
                                                                                                                        -> git 에서 <>code 초록색 버튼 HTTP
                                                                                                                        ex -> git remote add origin https://github.com/kimjunseok777/test.git

      8. 컨벤션(관습) 에 대한 협의 -> 팀원 간의 협의가 필요하다 (코드들 어떻게 작성할 것이고 이름 어떻게 서로 맞출 것인지 등등)
                                          -> 이니셜라이즈 (기초셋팅을 git-hub 에 올릴 준비)
            index.html
            pages
                  login.html
            css
                  reset.css
                  common.css
                  login.css
            assets
                  img
                  ...
                  font
                  ...
                  icon
                  ...
            ==> 누군가 한명이 (보통 조장) 최초로 이니셜라이즈 하면 된다

      9. 로컬 저장소의 히스토리를 원격 저장소에  밀어넣기를 할 것
            git push 원격저장소명(origin) 브랜치명(main)  --->  (브랜치명이 main이 아니라 master라면 main으로 바꿔줘야 한다)

            ** 주의사항
                  > 너 로컬 저장소와 히스토리를 동기화 시켜야해! 라는 오류가 뜰 수 있음 (히스토리가 다를 때)
                  원격 저장소의 코드를 다운(pull) 받아서 내 코드와 합쳐야합니다.

                  git pull origin main > (이러면 코드를 다운로드 받을 수 있음)

                  (저장소와 히스토리를 동기화 시키는 것이 필요하다)

                  pull, push 차이를 알고 있어야함  "pull 은 다운받는 것" / "push 는 내 히스토리를 밀어 넣는 것" (push하기 전에는 항상 소통하고 해야함)
                                                                                                                                                (" -f " 가 있으면 강제로 하겠다는 의미기에 신중히 해야한다)

      10. 분기 - branch
            나뭇가지 정도로 생각해볼 수 있다

                  내가 분기를 생성할 브랜치로 이동 (dev, main)  > dev 는 테스트 서버이다
                        - 브렌치로 이동하는 명령어 > git checkout 브랜치명

                        - 브랜치를 생성하는 명령어 > git branch 브랜치명

                        - 브랜치를 생성할 땐 가장 최신의 코드에서 생성하는 것이 좋습니다.
                              git pull ...
                              (git pull origin 브랜치명)

                        - 브랜치를 생성하면서 이동하는 명령어
                               git checkout -b 브랜치명

                        - 브랜치 목록을 확인하는 명령어
                              git branch

                        - 병합이 된 후에는 보관해야할 이유가 없다면 브랜치 삭제 (Delete)
                              git branch -D 브랜치명


-----------------------------------------------------------------------------------------------

대표적인 명령어       git add       >        commit       >     push
                              (준비시킴)        (로컬저장소 저장)    (원격 저장소에 밀어 넣는 것)

1. 최초 커밋  --> 최초 커밋 하기 전에 이니셜 템플릿이 있어야함 -> 이니셜 템플릿을 통해서 원격 저장소에 밀어 넣는 것 까지가 최초 커밋
      git init - 로컬 저장소 생성
      git add .  -->  ( "git add ." 은 패키지 내 같은 경로에 있는 모든 파일  /  "git add 파일명" 은 특정파일)
      git commit -m '커밋메세지'
      github 원격저장소 생성
      git remote add origin 레포지토리-주소   -->  ("원격저장소"와 "로컬저장소"를 연결하는 것 -> ex> git remote add origin https://github.com/kimjunseok777/test.git)
       * README file은 이 레포지토리의 설명이다
       * README .md가 있으면 history가 달라서 에러가 발생  <<- 이거 없으면 그냥 바로 동기화 됨
       * git pull origin main --rebase 이걸 통해서 코드 동기화를 시켜주고 push 해줘야 함
       * 동기화
      git checkout main
      git push origin main

      (이거 순서 확실하게 복습해오기!!!!!)


2. 팀원 참여
      git clone 레포지토리주소  (이거 해서 참여하는 팀원은 remote 까지는 자동이다) -> 'git remote add  레포지토리이름  레포지토리주소' 를 말하는 것
      -------
      git init - git remote
      git checkout main
      git pull origin main  (동기화 시켜주는 것)


3. 협업 관리
      git checkout dev(시작점)
      git pull origin dev(동기화) >> 가장 최근의 코드를 다운로드 받기 위함  --> 최신 버전에서 시작을 하지 않으면 컴플리트가 엄청 날 수가 있다
      git checkout -b feat/login  >> 이름짓는 컨벤션이 존재하기도 하고, 마음대로 이름 지어줘도 되고

      ...개발

      (...개발이 끝낸 후)
      git add .
      git commit -m '커밋메세지'
github
      git push origin feat/login
      >> 깃허브가 있다면 깃허브 홈페이지에 PR(Pull Request) 생성  --> PR을 생성할 때는 어떤 부분이 바뀌었고 리뷰 받을지 그런 것들이 나와있어야한다
                                                                                                                  PR : 내가 이 브런치에 '병합' 해도 될까요 라는 요청... 을 의미
                                                                                                                  (승인이 있어야만 코드 병합 가능) (리뷰를 한다는 이야기)

                                                                                                                  승인이 되면 병합을 해야한다 -> 버튼을 누르면 병합이 가능
                                                                                                                  충돌 상황이 발생할 경우 버튼이 비활성화 됩니다. (이거 충돌 발생했으니 해결하라는 의미)

충돌발생시
      git checkout dev
      git pull origin dev (dev 최신화) -- 다른 사람 코드가 병합
      git checkout feat/login
      git merge dev
      -> 이러면 vscode 내에서(왼쪽에 "소스제어" 부분에서 알려줌) 병합이 되었음을 알려주고 병합이 완료되면 (너 여기여기 병합 됐고, 어떻게 해결할거야? 라는 식으로 알려줌)
      버튼이 다시 활성화됩니다. --> 다시 PR 로 이동해서 병합 버튼 눌러주면 병합이 종료된다.


-----------------------------------------------------------------------------------------------

      개인 레포지토리에 코드를 공유

      ( 최초 )
      git init
      git remote
      -----
      ( 개발마다 )
      git add
      git commit
      git push

-----------------------------------------------------------------------------------------------

터미널에서 폴더를 이동하는 명령어 -> " cd "   ex)  cd git/day01   <<  이런식으로 작성
      cd
      cd 폴더명 (현재 경로에 있는 폴더롤 이동 가능)
      cd .. (상위 폴더)

      cd 절대경로 (이렇게 이동하는 것도 ㄱㅊ -꼼수 / 그래도 폴더명 명시해주면 슬래시로 이동해주는 게 좋다)

-----------------------------------------------------------------------------------------------

git init

      이후에 컴퓨터 환경 설정에 본인의 깃허브 이메일과 닉네임을 등록

      git config --global user.email 깃허브 이메일 주소
      git config --global user.name 깃허브 닉네임
      git config --list
      enter 누르면 다음 줄 + 확인 되었으면 q 누르고 종료

-----------------------------------------------------------------------------------------------

      git remote add origin https://github.com/kimjunseok777/test.git
      git remote
      git add .
      git commit -m 'init'

      git checkout -b main
      git push origin main

      git pull origin main -allow-unrelated
      git pull origin main --rebase