
1. 애자일

    (Agail)애자일 - 날렵한, 민첩한 이란 뜻
    시장 반응에 따라 빠르고 민첩하게 프로덕트에 대응하는 것

    프로그래밍에 있어서 애자일 방법론이란?

        스크럼(scrum)

            특정한 사이클(스프린트)를 반복하며 하나의 프로젝트를
            기획하고 리뷰하는 것
            
            예를 들어서) "치킨 할인 이벤트" 라는 프로젝트
 
            제품 백로그
            제품 백로그 개선 (그루밍 회의)

            팀 단위 스프린트 기획 (백로그 - 스프린트 백로그)
            스프린트 진행을 위한 테스크 진행

            배포/다음 스프린트를 진행할 수 있는데 그 전에 꼭 해야하는 스프린트 회고

            1) 개발자의 역량 부족
            2) 기획 및 디자인의 부재
            3) 버그나 에러 발생(엣지 케이스) -- risk buffer -- poc(개념 증명)

            이 싸이클을 여러번 도는 것을 "스크럼" 이라고 한다

        스프린트(sprint)
            제품 백로그가 나오면 스코프를 결정
            스코프에 따라 스프린트 백로그를 결정
            스프린트 백로그를 관리 (칸반보드 라는 것으로 관리 -- 칸반보드: 할 일/ 진행중/ 완료)
            ex) 일을 도와주는 도구 - Jira, Linear, Notion...

            칸반보드 장점 :
                1) 테스크 일정에 대한 공유
                2) 블라킹 된 요소들의 진행 상태를 알 수 있다
                (블라킹: 앞에 일이 끝나야 뒤에 일을 진행할 수 있는 상태라 업무 진행을 대기하는 상태)
                3) 백로그 (- 나 이거 업무 끝난 다음에는 뭐하지??...) --> 앞으로 내가 무엇을 할지 방향성을 잃지 않게 해줌
                    계획을 짜는 것 - 매년 12월
                                                    년 단위 목표를 구상
                                                    월 단위 목표를 구상
                                                    주간 단위 목표를 구상
                                                    일 단위 목표를 시간으로 구상

        애자일(it업계는 애자일 방식을 많이 쓴다) : 
            1. 수평구조가 많다
            2. 빠르게 시장 상황에 따라 대응 가능
            3. 리소스가 많이 듭니다. 문서화의 중요성

        폭포수(워터풀) :
            1. 수직구조가 많다
            2. 고민하지 않아도 됩니다.(프로젝트 기획이 위에서 아래로 내려가기 때문)
            3. 프로젝트가 반응이 좋지 않으면 손실이 큼


2. flex
        flexible layout
        : 유연하게 조작가능한 레이아웃

        flex는 '유연하다'라는 의미를 가지고 있으며, 빈 공간을 채우거나
        특정 요소를 수직 수평 정렬하고 어떠한 방향이나 위치든 유연하게 배치할 수 있는
        레이아웃을 의미한다

        ex) 모바일, 데스크탑 화면에 따라 요소의 위치가 바뀔 때 유연하게 대처하는 것

        반드시 "부모요소"에
        display: flex 를 선언 (자식 요소에 선언하는 것이 아니다)  -->  부모요소에 선언하면, 자식 요소에 영향이 가는 것이다

            justify-contents : 자식 요소에 "수평 정렬" 방식
            (왼쪽 정렬, 가운데 정렬, 요소 사이 균등하게 벌어짐 등 여러가지 정렬 방식이 있다)  -->  ex) center , space between ... 등이 있다

            align-items :  자식 요소의 "수직 정렬" 방식
            (상단, 중단, 하단에 배치할 수 있음)

            flex-direction : 방향을 설정 - default 값은 수평이지만, 수직으로 세워서 flex속성을 사용  -->  ex) column 등이 있다  -->  자식 생성 방향을 수직으로 바꿀 수 있음

            flex-wrap : flex된 요소들의 "줄바꿈" 요소 (wrap, no-wrap) --> 원래는 수평으로 나열됨, 하지만 줄바꿈 가능

            gap : 각 요소들이 가지고 있는 여백의 크기를 조정할 수 있음
            ==> column-gap, grid-gap 등등 여러가지 gap이 있던데 잘 모르겠다 --> 질문!!

            (flex들 요소들은 "margin"을 사용하지 않고 "gap"을 사용한다 -> 부모한테 "gap"을 줘서 마진 줌)

---------------------------------------------------------------------------

            *자식 요소에 쓸 수 있는 속성 (위에 것들은 부모 요소에 줄 수 있는 속성)
                flex-basis : 정렬된 요소의 크기 (width)

                flex-grow : 정렬된 요소가 '차지하는 비율' 입니다. 단, basis 속성이 있다면 해당
                값만큼 + 되기 때문에 grow 속성이 있는 경우 basis를 쓰면 안된다

                flex-shrink : 자식 요소가 부모 요소를 넘었을 때 줄어드는 비율
                                    (display flex는 자동으로 부모요소를 넘지 못하게 요소의 크기를 '균등하게' 줄입니다)
                                    -만약에 shrink를 0 으로 설정하면 부모 요소의 크기를 넘을 수 있음
                                    --> 사이트의 메인 상단부분에 좌우로 넘길 수 있는 배너 같은 곳에서 예시를 찾을 수 있다
