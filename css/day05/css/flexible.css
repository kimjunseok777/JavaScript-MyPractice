

* {
    box-sizing: border-box;
    padding: 0;
    margin: 0;
}
/*실제로 프로젝트를 들어가게되면, 나만의 reset css를 가지고 있으면 좋다
(나의 코딩 스타일에 맞추거나 회사 스타일에 맞춰서 하면 된다)*/


/*header*/
header {
    height: 60px;
    background-color: rgb(255, 111, 111);
}


/*banner*/
#main-banner-wrapper {
    height: 360px;
    background-color: rgb(255, 255, 137);
}
#main-banner-container {
    margin: 0 auto; /*위아래는 제외하고 가로로 가운데 정렬*/
    background-color: rgb(106, 255, 106);
    width: 1000px; /*배너 이미지의 크기 --> 자식들 너비는 1080px 로 해줬음*/
    height: 100%; /*360px과 같은 말 --> 부모의 height 가 360px 이기 때문*/
    display: flex; /*자식 요소들을 수평 정렬 시킴*/
    overflow: hidden;
    /*flex-shrink 로 인해 넘어가는 자식요소들을 hidden 으로 가릴 수 있다*/
    /*flex-shrink 는 부모가 아닌, "자식" 들에게 부여해주는 속성이다*/
}
#main-banner-container > .main-banner-list {
    /* width: 100px; */
    flex-basis: 1080px;
    /*flex속성 자식들에게 주는것, 정렬된 요소의 크기를 준다 -> width값이다*/
    /*--> 부모는 가로로 1000px 이고, 자식들은 가로로 각각 1080px 이다*/
    height: 100%;

    background-color: rgb(255, 223, 164);
    background-color: rgb(197, 94, 197);

    flex-shrink: 0;
    /*자식 요소의 축소 비율을 0으로 만든 것이다 -- 이제 부모 너비 넘어도 자식 요소들이 작아지지 않는다*/
    /*flex-shrink를 주지 않고 display: flex만 주게 된다면 부모보다 크기가 더 커질 수 없기
    때문에 자식 요소의 크기가 균등하게 줄어든다  --> shrink 주지 않으면 1000px 나누기 4가 된다*/
    /*
        display: flex는 자식 요소가 부모요소의 크기를 넘을 수 없지만 shrink 속성을 이용해서
        축소 비율을 0으로 만들어 부모 요소 크기를 넘길 수 있다 (자식요소의 축소 비율을 없애는 것이다)
    */

    /* opacity: 0; */
    /*--> 이렇게 투명도 주면 뒤에 깔려있는 부모요소 연두색인 것을 확인할 수 있다*/
}
/* 배너 만들 때 많이 사용하는 코드이다 */


/*-------------------------------------------------------------------------------------------*/


/*main*/
#main-container {
    display: flex;
    /*aside 와 section 을 가로로 정렬한다*/

    /* height: 100vh; */
    /*자식 요소들을 통해 높이가 정해졌기 때문에 높이는 주석처리 해준 것*/
}
#main-container > aside {
    /* width: 200px; */
    flex-basis: 320px;
    /*flex 속성에 주는 width값이다 (flex-basis)*/
    /*너비가 320px 보다 작으면 320px 로 맞춰지고, 더 넓다면 유지하지 않고 늘어난다*/

    background-color: rgb(70, 163, 255);
    /* background-color: black; */
}
#main-container > section {
    /* flex-grow: 1; */
    /*부모의 길이인 320px을 제외하고 나머지를 다 차지하게 됨 (flex-grow: 1)*/
    /*만약 부모 길이가 width 값이 아니라 flex-grow3이면 부모가 4/3, 자식이 4/1차지하게 됨*/

    /*--> flex-grow 잘 모르겠다 >> 질문하기!!!*/

    /*
        flex-grow는 부모 요소가 flex일 때
        자식 요소의 grow의 합을 구한 후
        비율에 맞게 크기를 분할한다
        
        만약 합이 1 이라면 전체 부모요소의 크기를 차지

        ==> **grow 합에 대한 비율이 중요하다!**

        부모요소가 블럭형태이기 때문에, 가로로 전체를 차지한다
        즉, flex : 1 을 주게되면 나머지 여백 화면 전체를 차지하는 것이다
    */

    flex: 1;
    /*
    flex: 1 320px 1
        (grow / basis / shrink)
    */
    background-color: rgb(255, 175, 78);
    display: flex;
    flex-wrap: wrap;
    /*부모를 넘어서면 줄바꿈을 하겠다는 것*/

    gap: 10px;
    justify-content: center;
    /* justify-content: space-between; */
    /* padding: 200px 0; */
}

#main-container > section > .main-product-item {
    flex-basis: 330px;  /*단 배열을 수정*/
    /*flex basis가 적용되려면 부모 요소에 display flex가 있어야함*/
    flex-basis: 30%; /*퍼센트로 값을 줘서 요소를 같이 줄일 수 있음*/
    height: 260px;
    background-color: rgb(255, 236, 129);
}


/*-------------------------------------------------------------------------------------------*/


/*footer*/
footer {
    height: 180px;
    background-color: #eee;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 32px;
    font-weight: bold;
    color: #cecece;
}