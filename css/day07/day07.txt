

김성용 강사
korpg95274@gmail.com


flex (정렬할 때 많이 사용)
    -> display: flex
    -> justify-contents (수평 정렬 방식)
    -> align-items (수직 정렬 방식)
    -> gap (여백 - 마진 대신 부모한테 주는 것  -->  요소들간의 간격을 정해준다  -->  요소 바깥의 여백은 부모의 "패딩" 을 통해서 주면 된다)
    -> flex-wrap (요소가 부모를 넘겼을 때 줄바꿈할 것인지, 사이즈를 축소 시킬 것인지 정할 수 있다)
    -> flex-grow, flex-shrink, flex-basis (자식 요소한테 주는 속성)

        ) grow : 부모를 채우는 자식요소들간의 비율 (자식요소 모두 1을 부여해주면  -->  1 : 1 : 1 ... 이 된다)
        ) shrink : 부모를 넘겼을 때 자식요소의 축소 정도 조정 (0으로 하면 안줄어든다)  -->  축소 비율을 0으로 만들어줘서 가로 배너 같은 것들을 만들어 줄 수 있다
        ) basis : 자식 요소의 너비값 최소 기준을 정해줄 수 있음 (min-width 값을 정해주는 것이다) --> % 로 주면 굉장히 유연하게 만들어줄 수 있다

grid (표, 바둑판 형태 만들 때 많이 사용)
    -> colum, row
    ) grid-template-row ( 행 )
    ) grid-template-column ( 열 )

-> flex, grid 이것들은 유연하게 요소를 배치하기 위함

---------------------------------------------------------------------------

< 이번 수업 >

트랜지션, 트랜스폼, 애니메이션

transition (전환)

    전환하는 과정을 사용자에게 어떻게 보여줄 것인가를 다룰 수 있는 속성이다.  ***
    대상, 지속 시간 등을 설정할 수 있다.  ***
    ) transition 은 "속성" 이 전환하는 과정을 사용자에게 이 "속도" 로 "이렇게" 보여줄 것이라고 정의하는 것이다
    ex) transition : transform 1s linear;  -->  이런식으로 사용할 수 있다  -->  속성 부분에 all 을 적어서 모든 속성을 가리킬 수도 있다
    ex) transition : all 1s ease;

    ex)
    상단 메뉴가 0px 에서 300px 로 바뀔 때
    높이가 커지는 과정을 사용자에게 보여줄지에 대한 여부이다
    -> 만약 트렌지션이 없다면, 변하는 과정 없이 한번에 크기가 증가 -> 즉, transition 은 요소가 전환하는 "과정" 을 보여줄 수 있는 것이다  ***

    투명(opacity) 효과를 이용하여 서서히 나타나거나
    사라지게하는 용도로도 사용 가능

    transition: all(height, width ... )   2s               ease
                       ----                           -----              ----
                     property                  duration       timing-function

    ) transition : 속성(opacity, height ...) , 시간(s) , 기능(ease, linear ...)  -->  이런식으로 사용하면 된다 (속성은 2개 이상 넣어줄 수 있다)
    2개 이상 ex) transition: opacity 0.5s linear, height 0.5s linear;  -->  이렇게 콤마 넣어서 두개 이상 줄 수도 있다

    timing-function :
        * linear  (균등하게)
        * ease  (점점 느리게)
        * ease-in  (점점 빠르게)
        * ease-out  (빨랐다가 느리게)
        * ease-in-out  (빠르게 느리게 빠르게)

        step-start  (시간초가 지나기전에)  ->  이거는 사용 잘 하지 않음
        step-end  (시간초자 끝나고나서)  ->  이거는 사용 잘 하지 않음

---------------------------------------------------------------------------

    transform 은 transition 으로 걸어줄 수 있다  -->  ex) transition: transform 0.5s ease;
    이렇게 transform 걸어주고, -->  ex) transform: translate(150px, 0); 이렇게 구동 주면 된다

    마찬가지로, 속성 넣어줄 때 transform 직접적으로 적어도 되고, all 적어도 된다
    ex)
    transition: transform 0.5s ease;
    transition: all 0.5s ease;

---------------------------------------------------------------------------

    animation :
        요소의 변화의 반복을 설정할 때 사용한다

        ex)
        animation: 애니메이션명(이름 내 맘대로)    duration(시간)    count(횟수)   direction(편도 or 왕복)

        @keyframes 애니메이션명 {
            from 혹은 0% {
                시작 상태
                어떤 요소가 애니메이션이 시작할 때부터 변화가 필요한 경우
            }

            n% (30%, 60%, 70%...) {
                변화할 css 속성
                transform: translateX(-16px)
            }

            to 혹은 0% {
                마지막 상태
                초기화 값을 넣는 것이 아니라 마지막 상태를 변동하고 싶을 때 사용한다
                (->나는 애니메이션이 끝났을 때 css가 이렇게 변해야 할 때)
            }

            -----------------------------------------

            ex)
            0%{
                width: 100px;
            } 100%{
                width: 300px;
            }

            ex)
            from{
                width: 100px;
            } to{
                width: 300px;
            }
            
        }

