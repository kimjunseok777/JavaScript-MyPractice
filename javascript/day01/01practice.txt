
JavaScript :
    인터프리터 언어이다. HTML 페이지를 동적으로 만들고 싶을 때 사용한다.

    인터프리터 :
        컴파일 과정 없이 있는 그대로 코드를 실행
        
    컴파일 :
        "안녕하세요" -> 010101010101 (컴파일)  --> 컴퓨터 언어로 변경하는 것

---------------------------------------------------------

입출력 :
    숫자와 숫자를 더하는 코드를 만들었다고 가정
        입력 - 연산 - 출력 (최종값 , 반환값)

        출력 : 이미 알고 있어야하는 값  -->  어떤 결과값이 나와야 해?
        입력 : 출력 값을 토대로 추론해야하는 값  -->  출력 값이 나오기 위해서 어떠한 값들이 필요해?
        연산 : '입력값' 을 '출력값' 으로 만드는 과정을 자연어로 풀이
                    자연어를 코드로 옮기는 과정

        2 ? 2 = 4

---------------------------------------------------------

javascript 적용 방법 :   --> (html 코드 안이면 어디든 적을 수 있다)
    내부 : html 에 안에 " script " 안에 어디든 쓸 수 있다 (script도 여러개 작성 가능하다)
        <html>
                <script>
                    ...
                </script>
        </html>

    외부 :
        *.js
        <html>
                <script src="경로></script>
        </html>

---------------------------------------------------------

자바스크립트 내의 주석 :
    / ~ / : 한줄짜리 주석
    /* ~ */ : 여러줄짜리 주석

---------------------------------------------------------

console.log 라고 하는 것은 개발자 도구에 "메세지" 를 띄워주는 것이다.
    -> (경로 지정하고 "node 파일명")
    -> node 실행시킬 파일을 담고 있는 폴더로 이동한 후에, "node 파일명" 해주면 콘솔 확인 가능

개발자 도구에 콘솔을 찍어야 하는 이유 :
    에러를 찾기 위함 :
            어떠한 기능을 개발하고 있음 (1~10 까지 개발중)
            1~2를 개발
            3에서는 1~2를 통해 만들어진 값이 필요
            3에서 에러가 발생  >>  디버깅을 진행해야 함
            console.log(1~2를 통해 만들어진 값)

            또 다른 예시는, 1~10까지 다 만들었다, 근데 에러가 발생함
            -> 가장 의심되는 구간에 콘솔 (console.log) 찍는다
            -> 7에 콘솔 찍었는데 제대로 나왔다면 8~10 사이에 에러가 생겼다는 것임

            즉, 디버깅을 통해 에러를 찾는데 범위를 좁혀나가는 것에 있음
            console.log("test, ooo start")

            console.log  ->  개발자의 "디버깅" 을 돕기 위한 명령어

            console.log 를 통해서 에러를 찾고 해결해주었으면,
            사용한 console.log 는 지워줘야 한다.


---------------------------------------------------------

Javascript 는 브라우저 환경에서만 실행되는 언어
나는 Javascript를 브라우저 뿐만 아니라 컴퓨터와 같은 외부에서 사용하고 싶을 때 Node.Js  활용

NodeJS :
      크롬의 v8 엔진을 바깥으로 꺼내어 JS를 브라우저가 아닌 외부에서도
      실행할 수 있도록 하는 실행 환경 (프로그램, 도구 같은 것이다)

      NodeJS 를 설치하는 순간 html 없이도 js를 실행할 수 있음 (터미널에서 확인 가능한 것이다)
            -> 원래는 .html 이어야만 사용할 수 있는 것이다 -->  html의 내부나 외부 스크립트로 사용해야 함 원래는
            -> 우리들이 흔히 아는 React 라는 것도 NodeJs라는 것을 통해 돌아감
                (원래는 다 html 이어야만 실행을 할 수 있는 것들이다)

            https://nodejs.org/en

            다운로드가 다 됐다면 새터미널을 열고 node -v 를 입력하면 된다
                -> 그러면 버전 (v20.12.0 이런식으로) 뜨면서 실행 완료

            
---------------------------------------------------------

checklist
    1. 내가 가지고 있는 웹사이트의 모바일 반응형 (대응)
    2. 변수는 언제 사용하는지 -> 복잡한 연산...
    3. 상수는 변수와 무엇이 다르고 언제 사용하는지 알아야됨
    4. var 는 옛날 것

