
1. 변수는 언제 사용하는가
    -> 데이터 재사용하고 싶을 때, 편의성, 특정한 값과 연산의 재사용, 값의 별칭을 정해줌

2. 출력 -> 최종적으로 구하고자 하는 코드이자 값이다 (출력값을 모른다면 풀 수 없는 문제이다) -> 구체화 해야함 (자연어 풀이)
    출력 구체화 -> ex) "나는 숫자 5를 뽑을 거야" 가 아닌 "그 숫자 5가 어떻게 나온 5인지"
    입력 -> 무엇을 입력해야할까 -> 100% 추론까지는 못함 (연산 과정에서 생기는 값들이 있을테니까)
    연산 -> 자연어로 과정을 풀이 (입력값을 통해 출력값이 나오는 과정)

3. 제어문( if문 : 분기생성 or 만약에 ~한다면 ) , 반복문( for문 : 반복 )은 언제 사용할 수 있을까와, 내가 이를 자연어로 풀이하는 것이 중요하다


-----------------------------------------------------------


** day03 수업 :
        while 문
        function(함수)
        지역변수  전역변수


-----------------------------------------------------------


* 함수 (function)  -->  '기능' 이라고 보면 된다  -->  재사용할 수 있다
        --> function은 한가지의 기능이고, 내가 "사용하고 싶을 때마다 이 기능을 재사용할 수 있는 것" 이다  -->  "기능 묶음" 이라고 생각하면 된다
        --> 함수는 이벤트루프에서 "콜스택" 에 저장되고 실행한다

프로그래밍 패러다임
    개발자가 어떠한 관점을 갖고 개발을 하느냐 --> 선택하는 언어가 달라짐

1. 명령형 프로그래밍
    "절차" 지향 : 순서를 중요시함, 컴퓨터 처리 구조와 일치하여 속도가 굉장히 빠름 (하지만 순서대로 다 이어지기에 오류 나오면 힘들어짐)
        ex) c언어
    "객체" 지향 : 객체들의 집합으로 프로그래밍의 상호작용 (객체마다 이어짐 -> 오류 나올시 수정이 절차지향보다 좋다)
        ex) java

2. 선언형 프로그래밍 ( 쏙쏙 들어오는 함수형 코딩 책 추천 )
    "함수" 지향 : 함수들을 조합하고 프로그래밍을 생성하는 방식 --> 객체지향과 유사하다고 볼 수 있다
        ex) javascript

--> 자바스크립트는 "함수형 프로그래밍" 패러다임이며
        특정한 기능을 구현하고 해당 기능을 통해 상호작용하는 방식


-----------------------------------------------------------

*** 함수 ***
        어떠한 연산을 하는 특정 코드의 집단
        "선언부" 와 "실행부" 가 나뉘어져 있다

        ex ) 두 수를 더하고 "출력"하는 기능 (함수)

        // 선언부                       //--> 괄호 안에는 실행부에서 적었던 순서대로 데이터가 적힌다
        function addNumber(a, b) {  //--> 숫자밖에 못들어간다는 것을 적어주려면 (a:number) 같이 해주면 된다
            console.log(a+b) // 5
        }
        // 실행부
        addNumber(3, 2)  --> 선언하지 않아도 a가 3이 되고, b가 2가 된다 (원래 선언 let, const, var 같은 것들이 필요하다)
                                --> addNumber 라는 함수를 사용하기 위해 3, 2 를 전달할 거야 (실행부에서 선언부로 전달)
                                3, 2 는 '인자' 혹은 '매개변수' 라고 한다
                                --> console.log(a+b) 는 5가 찍힌다
                                --> 실행부를 반복하여 여러번 작성해줄 수 있다 (그러면 자연스럽게 함수 안에 적었던 콘솔로그 실행 횟수만큼 여러번 찍힘)

----------------------------

        ex ) 두 수를 더하고 "반환"하는 함수
                왜 반환할까요? -> 함수가 "연산한 값" 을 코드 블럭 바깥에서 사용하고 싶을 때 (return 사용)

        function addNumber(num1, num2) {
            return num1 + num2  // 여기서 'return'을 써주지 않으면 'num1 + num2' 라는 연산은 코드블럭 안에서만 유효하다
            ( break은 코드블럭을 종료하지만, return은 연산식을 반환하고 종료한다 -> 코드블럭 밖에서도 사용할 수 있다 )

            /* 주의사항 */
            console.log(num1 + num2) //--> 이거는 "return" 한 것이 아니라 "출력" 한 것이다  -->  코드 블럭 밖에서는 유효하지 않은 연산식이다
        }

        let a = addNumber(1, 2) // 3  -->  a는 3으로 선언된 것이다 -> 다음에 "a = ~"이라고 바꿔주지 않는 이상 3으로 유지된다
        console.log(addNumber(1, 3), a) // 4 3
        addNumber(addNumber(1, 3), a) // 7  -->  addNumber는 두 수를 더하는 연산으로 return 되었다
            --> 즉, "num1 + num2" 는 "addNumber(1,3) + 3" 이다, 그래서 4 + 3 = 7 이 된다
            
        ==> 위에 문제들을 봐보면 전체적으로 "num1 + num2" 가 return 된 값으로 연산된다는 것을 확인할 수 있다
        ==> 이 연산식 (num1 + num2) 은 원래 return 해주지 않으면 코드블럭 안에서만 유효하다

        ==> 함수 "실행부" 에 반환하는 값이 있다면
                함수를 실행하기도 하면서, 그 자체의 실행부가 값이 된다


-----------------------------------------------------------

checklist
    함수 : function

    1. "함수" -> 다른 사람이 작성한 함수를 분석해보는 것
    2. "함수" -> 내가 정의한 기능을 하는 함수를 만들 수 있느냐 -> 자연어 풀이가 필요함
    3. "함수의 종류" -> 아직 몰라도 됨 / 단, 반드시 알아야되는 것은 "콜백함수" (매개변수의 흐름때문에 반드시 알아야 됨)
                                                                "화살표 함수" (수업할 때 많이 쓴다, 가독성 좋다)
    4. "지역변수 전역변수 차이" -> 스코프 체이닝 (없으면 상위로 타고 올라간다)

    ==> 재귀함수, 즉시실행함수는 몰라도 된다 / 지금 배우고 안쓰임 --> React 후반부 가서 쓰인다