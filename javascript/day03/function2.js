
// 함수의 종류
// 기명함수  익명함수  재귀함수  즉시실행함수  화살표함수  콜백함수

//------------------------------------

// 1. 기명함수
// 이름을 지어주고 재사용하는 함수
function printHello() { //-> 'printHello' 라는 이름을 지어줬다  //=> 매개변수가 필요없기 때문에 넣어주지 않았다
    console.log('hello')
}
printHello() // -> 실행부, 매개변수 없이 실행만 시켜준 것
printHello()
printHello() // -> 이렇게 언제든지 재사용할 수 있다

//------------------------------------

// 2. 익명함수 ( 일회용 )
// 함수에 이름을 지어주지 않음 -> 이름을 지어주지 않아서 혼자서는 실행할 수 없다
// 일회성 함수로 많이 쓰임 -> 즉시실행함수, 콜백함수, 사용자이벤트와 함께 많이 쓰임 (이렇게 도와주는 친구가 필요함)
// 이름이 없기 때문에 가독성이 좋지 않습니다
// 일회성이면서, 다른 누군가가 실행시켜주는 것이 "익명함수" 이다

// function() {  //--> 이름이 없어서 혼자서 실행이 안됨 --> 주석 풀어보면 에러가 난 것을 확인 가능
//     console.log("hello")
// }

// --> 아래 즉시실행함수... 등 처럼 익명함수를 써주면 오류 없이 실행이 된다

//------------------------------------

// 3. 즉시실행함수 ( 일회용 )
// 함수의 선언과 동시에 실행시켜주는 함수이다
// 보통은 "익명함수"와 같이 쓰이며 한번 실행하고 말 경우 실행과 선언을 동시에 해주는 것
// 한번 사용하고 다시 사용하지 않을 때 많이 쓰임

// () ()  --> 왼쪽 괄호는 '선언부' / 오른쪽 괄호는 '실행부'를 의미
(function(num1, num2) {
    console.log(num1 + num2) // 5
}) (2, 3)
// (function(num1, num2) {console.log(num1 + num2)}) (2, 3)  -->  이렇게 선언부 괄호, 실행부 괄호가 바로 쓰인다
// (function() {}) ()

//------------------------------------

// 4. 화살표함수
// ES6 (이크마스크립트6) 이후에 등장, 보다 간단한 표현식 (표기법) 으로 함수를 선언할 수 있음

// 아래 두개의 코드는 같은 코드이다 --> 그냥 화살표함수이냐, 아니냐 그 차이다 (취향에 맞게 쓰면 되는데, 화살표함수가 가독성 좋음)
function a(param) {
    console.log(param)  //-> 문자열 "param" 이 출력된다
}
a("param")
// 앞에 'const' 는 'let' 을 써도 상관 없다 -> 변수에 담아서 쓸 수 있다
// 화살표함수는 function 을 쓰지 않는다 -> 상황에 따라 "let" 이나 "const" 를 쓴다
const a = (param) => {
    console.log(param)  //-> 문자열 "param" 이 출력된다
}
a("param")
// 화살표 함수의 즉시실행함수 : ()=>{}  익명함수도 이렇게 하면 사용이 됨 (앞에 function 안 붙여도 됨)

//------------------------------------

// 5. 콜백함수
// 매개변수로 전달받은 함수를 실행하는 함수
function func(num1, num2, callback) {
    let result = num1 + num2;
    // 함수의 연산 결과를 콜백함수의 매개변수(인자)로 사용할 수 있음
    // 비동기 함수 실행 이후 다음 실행해야할 동작을 동기적으로 작성 가능 (적어만 놔두셈 이건)
    callback(result) // 5
    //콜백함수
}
// 선언부에서 res라는 익명함수를 실행부의 callback 이라는 매개변수에 담고, callback을 실행한 것이다
func(2, 3, (res) => {
    console.log(res)  // 결과값은 5이다
})  // 전달받은 매개변수를 출력하는 익명함수이다 (전달받은 값을 출력하는 이름 없는 기능)
    // "선언부"와 "실행부"가 나뉘어져있습니다
    // 실행부에서 선언된 함수는 익명함수이며 callback 매개변수는 전달받은 함수를 대신 실행한다
    // 콜백함수는 아래에서부터 위로 읽어야한다


// 위에 콜백함수 식의 똑같은 식의 예시
// 화살표 함수
let callback = (res) => {
    console.log(res) // 5가 찍힌다
}
// () => {}
callback(5)

//일반 함수
function callback2(res) {
    console.log(res) // 7이 찍힌다
}
// function () {}
callback2(7)

//------------------------------------

// 6. 재귀함수
// 같은 함수 안에서 또 다시 자기 자신을 호출하는 것, 내 자신을 스스로 반복하는 함수

function hello() {
    console.log("hello")
    hello() // --> 실행문 안에 또 실행문이 있는 것  -->  즉, 바깥에서 실행을 시켜주면, 안쪽에 있는 실행문 때문에 무한 반복 하는 것
}
hello() // --> 실행해주는 것 --> hello hello hello ... 무한반복

// quiz - 재귀함수
function f(n) {  //-> 실행부
    if(n <= 1) return 1 //-> n이 1보다 작거나 같으면 1을 반환하고 종료
    return n + f(n-1)  // 원래는 위에 hello 처럼 무한반복하는 건데, 증감식(감소)가 있어서 n이 1이하면 1을 반환하고 반복을 멈추는 것이다
    //--> 위의 f(n-1) 이 재귀함수 역할을 한다
}
f(10); //-> 선언부
// 10 + f(9)...
// 10 + 9 + f(8)...
// 10 + 9 + 8 + f(7)...
// -> 10 + 9 + 8 + 7 + 6 + 5 + 4 + 3 + 2 + 1 = 55

// 10부터 1까지 더한 것은  -->  10 x 11 / 2 = 55  -->  이거 수학 못해서 왜 이 식이 되는지 모르겠음

// 마지막에 1을 만나면 위에 if문의 조건을 만족해서 1을 반환하고 종료
// 다 더해주면 55

// 어떠한 기능 (입력과 출력)
// 재귀함수는 잘못쓰면 컴퓨터가 다운되기 때문에 자주 사용하지 않는다 -> 코딩테스트때 문제로 많이 등장한다
// 탐색 문제에 많이 쓰인다