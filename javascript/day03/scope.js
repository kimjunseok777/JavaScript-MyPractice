
/*
scope : "범위" 라는 뜻
    변수에 접근할 수 있는 범위
    변수를 찾기 위한 규칙

    종류:
    전역 스코프, 지역 스코프

    -----------------------

    전역 스코프 :
        어디에서나 접근할 수 있음, 지역변수보다 우선순위가 낮습니다

    지역 스코프 :
        특정한 코드 블럭 { } 에서 접근하는 값  -->  코드블럭 바깥으로 반환하지 않는 이상, 코드 블럭 내에서만 유효하다
*/

//-------------------------------------------------------------

// 1. 전역 변수
// 전역 스코프에 저장되며, 전역에서 사용 가능한 변수
// 어디에든 사용해야할 때 사용, 재사용해야할 때 사용
// 메모리에서 삭제되지 않습니다 (많이 쓰면 메모리에 부담이 될 수 있다)

let a = 5; // 전역 변수 (어떠한 코드 블럭에도 속해 있지 않기 때문)

// if() {
//     console.log(a) // 5  -->  어느 블럭에다가 a 를 가져가도 사용할 수 있다 (전역변수이기 때문)
// }
// function() {
//     console.log(a) // 5
// }

//-------------------------------------------------------------

// 2. 지역 변수
// 지역 스코프에 저장되며, 특정 구역을 벗어나면 메모리에서 사라집니다 (가비지 콜렉터)

function a() {
    let a = 5; // 지역 변수 a (코드블럭 내에서 선언해준 a 이기에 "지역변수" 이다)
    a = 7; //-> 코드 블럭 내이기 때문에 a 는 7 로 바뀐다 (지역변수)
}
a() //-> 여기서 a는 계속 5이다 (7로 바뀌지 않는다) (위에 블럭 내에서만 a=7 로 바뀐 것이다)
//
let b; // 전역 변수 b
function a() {
    b = 7;
}
a()
console.log(b) // 7 --> a를 실행했을 때 b가 undefined 에서 7로 바뀌기 때문 (전역 변수이기에 블럭 안에서 b를 재선언 해줘도 값이 바뀐다)
//
function c() {
    b += 2
}
console.log(b) // 7이 나온다 -> 왜냐면 그 전에 c 를 실행해주지 않았기 때문
// -> c() 로 c를 실행해주고 콘솔로그b를 찍으면 b는 9가 나온다
c()
console.log(b) // 9

// 지역변수는 블럭 내에서 한번 쓰고 사라지는 것이다
// -> return으로 반환해준다고 해도 다른 변수로 담아줘야하기 때문에 사라진다고 볼 수 있다
// -> 기명함수 옆에 괄호를 비워놓는 이유는 따로 매개변수가 필요없기 때문이다