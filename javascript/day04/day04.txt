
** 함수 **  정의하는 주체 -> 자연어로 풀이하는 과정이 반드시 필요

day04 수업 :
    객체와 배열 **
    자바스크립트의 테이터 타입

    데이터타입 : 여러분이 넣으려고 하는 값이 숫자인지, 문자인지, undefined인지 등등 자료형 데이터타입
    ex ) 
    int a = 5;  //--> int 는 정수의 줄임말 (integer : 정수) (이런식으로 "자바" 나 "c언어" 는 데이터유형을 명시하며 코드를 작성한다)
    a = "안녕하세요" --> 오류가남(x)  // 정수가 아니기 때문에 오류가나는 것 (자바나 C언어는 이렇다) (정적 타입 언어)

    let a = 5;
    a = "안녕하세요" (o)

    => 자바스크립트의 테이터 타입은 존재는 하지만 실행 때 타입이 맞는지 추론하므로
        에러가 발생하지는 않습니다 (동적 타입 언어) --> 타입이 정해져 있지 않다 // JAVA같이 타입이 정해져 있는 것은 "정적 타입 언어" 이다

    console.log(typeof a) // "string" -> 그렇다고 자바스크립트의 데이터타입이 없는 것은 아니다 (이렇게 문자열 뜻하는 string이 나온다)  -->  typeof 해보면 된다
    ==> 다만 실행할 때 추론하므로 에러가 나지 않는다 -> 굉장히 위험한 것이다

------------------------------------------------------------

    ** 정적 타입 언어 : 변수의 타입을 선언해야하며, 한 변수에 같은 타입의 값만 재할당이 가능하다
                                   -->  다른 타입을 넣고자 한다면 캐스팅을 통해 형변환을 시켜줘야한다  -->  ex) 자바, c언어

    ** 동적 타입 언어 : 변수의 타입을 선언해 줄 필요가 없고, 한 변수에 여러 타입의 값을 재할당해줘도 상관 없다  -->  ex) 자바스크립트

------------------------------------------------------------

    자바스크립트 데이터타입 : 원시타입(콜스택 저장) , 참조타입(힙메모리 저장)

    원시타입 :
        string (문자열)
        number (숫자)
        boolean (True / False)
        undefined (데이터 타입이 정의 되어있지 않은 상태)
        null (값이 명확히 비어있음을 나타내는 상태 -> 정의 되어있는 상태)

    참조타입 :  --> 원시타입이 아닌 것은 모두 객체 (참조타입) 이다
        자바스크립트에서 "원시타입이 아닌 것은 모두 객체" 이다
        하나의 데이터가 아닌 "여러 데이터의 집단" 을 이루고 있는 경우가 많음
        원시타입은 "콜 스텍" 에 저장되는 반면 참조 타입은 "힙 메모리" 에 저장
        (다른 곳에 저장되고, "주소값" 에 저장한다 ==> 즉, 힙메모리에서 콜스텍으로 주소를 불러와서 사용하는 것)

        ex )
        let a = 5; --> 데이터 한개 --> 데이터는 원래 하나의 변수에 하나 밖에 사용하지 못함, 하지만 참조타입 (객체) 을 사용하면 다르다
        let b = {
            name: "김준석",
            age: 20
        } --> 데이터 두개이상 (데이터집단) --> 참조타입을 사용하면(객체) 하나의 변수에 여러개의 데이터를 담을 수 있다

        b.height = 190  // -> 이런식으로 해도 값이 추가가 된다  -->  b라는 객체에 "height : 190" 의 키값과 벨류값이 추가되었다
        delete b.height  // -> 이런식으로 delete 로 값을 삭제할 수도 있다

    ------------------------------------------------------------------------

    객체 :
        "키" 와 "값" 으로 구성된 속성의 집합
        key : 데이터의 집단에서 다른 테이터와 구분되는 값  -->  중복 불가
        value : 값  -->  중복 가능

        객체(참초타입) ex )
        age, height 가 "key" / 20, 190 이 "value"
            let junseok = {
                age: 20,  --> age 가 19로 바뀜
                height: 190
            }
            junseok.age = 19
            console.log(junseok.height) // 190 // --> 키 값을 통해서 벨류를 찾은 것이다  -->  대괄호 접근법도 있다 console.log(junseok["height"]) // 190
            
            ==> 하나의 공통된 주제로 여러가지의 데이터를 묶을 수 있다 (위에는 junseok 변수로 여러 데이터를 묶은 것이다)

            ==> 객체가 가장 중요한 이유  --> "JSON"
            * JSON (Javascript Object Notation) : 자바스크립트 객체 표현식
            Notation : 표기법
            현재 가장 많이 사용되는 서버와 서버에서, 혹은 데이터를 저장할 때 가장 많이 사용되는 테이터 표현식

            --> 옛날 옛적에는 "JSON" 이 없었기 때문에 "XML" 형태로 표기했다
            <XML> -> html의 "태그형태" 로 데이터를 표기한 것 (옛날방식 - 용량도 크고 쓰기도 힘들다)
            ex )
            XML 표기 :
                <junseok>
                    <age>21</age>
                    <height>190</height>
                </junseok>
            ----------------------------------------------
            JSON 표기 :
                "junseok" : {
                    "age" : 21,
                    "height" : 190
                }
            ----------------------------------------------

            ==> 자바스크립트의 객체가 중요한 이유는
                    앞으로 백엔드와 데이터 소통을 할 때 받게 되는 데이터의 형태가 "자바스크립트의 객체" 이다  -->  JSON

            backend 로그인 요쳥 (이메일, 비밀번호)
            {
                email: "test@test.test"
                password: "testtest"
            }
            ==> 이런식으로 객체형태로 데이터를 받게 된다
            ==> 내가 보내야하는 데이터 형태도 "JSON" 이고, 받아야하는 데이터 형태도 "JSON" 이다

            ----------------------------------------------

            let post = response.data ( -> 백엔드에 전달받은 데이터 )
            console.log(post)
            {
                title: "안녕하세요",
                content: "<div>반갑습니다  ...</div>"
                User: {
                    nickName: "김준석"
                },
                createAt: "2024-04-08',
                Comments: [...]
            } ---> 이런 식으로 JSON 형태로 백엔드에서 데이터가 온다

            ----------------------------------------------

            객체의 접근법 : 닷(.) 표기법 , 대괄호([ ]) 표기법 --> "키" 를 닷으로 적거나, 대괄호 안에 적거나이다
                1.  . 표기법 (닷 표기법)
                    post.title  //-> 안녕하세요
                    post.User.nickName  //-> 김준석

                2. [ ] 표기법 ==> 다른 점이 있다면 [ ] 표기법은 키값으로 스트링(문자열)이 들어가야 한다
                    post["title"]  //-> 안녕하세요
                    post["User"]["nickName"]  //-> 김준석

                *** 닷 표기법, 대괄호 표기법 모두 객체의 키의 "값" 에 접근하는 기능인데,
                       닷 접근법은 그냥 적으면 되고, 대괄호 접근법은 문자열 [" "] 로 적어야 한다

            ----------------------------------------------

            console.log() ==> log 라는 키값에 함수가 담겨져 있는 것이다
                --> 객체의 키값으로 함수가 배정되면 우리는 이를 "메서드" 라고 한다

                const AuthService = {
                    signIn({email, password}) {
                    },

                    signUp: () => {
                    }
                }

                AuthService.signIn({email, password})
                ** 자동완성 **

            ----------------------------------------------


    배열 :
        순서가 보장된 데이터들의 집단
        객체가 "키" 로 데이터를 구분하였다면, 배열은 "순서" 로 데이터를 구분합니다

        const junseok = {
            name: "김준석"
        }
        => 객체: 특정한 공통된 주제로 값을 나타내는 용도

        const junseok = ["김준석", 20, 190]
        => 객체가 아닌 단순히 여러개의 데이터를 하나의 집단으로 묶으려면 배열 사용
        => 순회 해야한다면 (순서대로 반복) 배열 사용

        const 와르르멘션 = ["짱구", [짱아, 짱구네가족], "오수", {남편, 아내}, "옆집아줌마"]

        와르르멘션.length = 5  //--> 아이템의 "갯수"를 나타낼때는 ".length" 를 사용하면 된다 ("갯수"는 5 / "순서"는 0부터 4까지 있다)
        와르르멘션[3] = {남편, 아내}
        와르르멘션[와르르멘션.length - 1] = 배열은 0부터 시작하기 때문에 -1 해주면 마지막 순서의 값이다 = 옆집 아줌마

        => 배열에는 객체나 또 다른 배열이 요소로 들어갈 수 있다
        => 0부터 시작하는 순서를 통해 각기 다른 데이터에 접근할 수 있다
            (0 === "인덱스") --> "순서" 를 "인덱스" 라는 말로 부른다

    배열쓰임 ex )
        const products = [
            {
                name: "고무줄 바지",
                price: 300000
            }
            {},
            {}
        ]

let string;
    for(let i=0; i=<products.length; i++) {
        console.log(products[i])  //--> 이 배열에 있는 모든 아이템을 순회할 수 있다
        ...
        string + '<div>...</div>'
    }
    const $productList = document
    $productList.innerHTML = string

    ==> 배열은 반복문과 함께 많이 쓰인다

----------------------------------------------------------------

객체:
    특정한 키 값으로 데이터를 분류하며 데이터들의 공통된 주제로 집단으로 묶을 때 사용한다
    "특정한 키로" 어떠한 키의 값을 찾는 경우라면 --> 객체

배열:
    순서가 보장된 자료구조, 순회하거나 반복하는 경우, 순서(index) 를 통해서 다음 혹은 이전을 불러와야할 때 사용한다
    마찬가지로 공통된 주제로 데이터를 묶을 수 있음

----------------------------------------------------------------

*** 과제 ***

웹 사이트 선정해서 일부 항목만 배열 혹은 객체로 표현

ex) 무신사의 이번달 top10, 멜론 뮤직 차트 등등

ex)
[
    {
        id: 절대로 겹치지 않는 값 (12345678, uuid)
    },
    {},
    {},
]

----------------------------------------------------------------

배열의 내장함수와 고차함수 (유튜브에 한번 검색해봐)

push, pop, unshift, concat, join, reverse, splice, slice, includes, index0f

map, filter, find, findIndex, reduce, every, some, sort

----------------------------------------------------------------