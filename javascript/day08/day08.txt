
DOM API

    DOM (Document Object Model) - 문서 객체 모델
        흔히 HTML에서 사용하는 div, span과 같은 "요소" 들을 나타내는 말 (dom 객체 요소)

    API (Application Programming Interface) - 통신에 필요한 언어와 메세지의 일체
        응용 프로그램 사이에서 "통신에 사용되는 언어와 메세지의 일체" -> "매개체"

    DOM API
        - 프론트엔드에서 DOM 관련된 요소를 javascript 로 언어와 메세지를 통해 데이터를 주고 받는 것
        - HTML 요소를 자바스크립트를 활용하여 속성 값을 마음대로 변경 --> (HTML을 내 마음대로 바꾸기 위함)
        - 요소의 생성도 가능하다  (자바스크립트를 통해서 html을 내 마음대로 컨트롤할 수 있다)
        - DOM API 를 쉽게 말하면 HTML 태그들에 접근할 수 있는 것
        - DOM : <html> ~~~ </html> <-- 이 테그들 모두 접근 가능


---------------------------------------------------------------------------------------


DOM Selector (DOM 선택자)
    DOM API 를 활용하기 위하여 HTML 에 특정한 요소를 선택하는 것

    ==> document. : 이것이 DOM API의 객체이다 (dom에 명령을 내릴 수 있도록 객체를 제공하는 것)  

    1. document.getElementById("menu-item")
    2. document.getElementsByClassName("menu-list")  // id, class 명시되있기에 . 이나 # 쓰지 않아도 된다

    - 유사배열 객체
    - live (실시간으로 값이 수정될 수 있음)
    --------------------------- 1, 2는 "HTMLCollection" 을 반환


    3. document.querySelector('css 선택자')  ex)  ('#menu-item > p') 이런식  //  1개 가져옴 (가장 처음 발견된 거 1개)
    4. document.querySelectorAll('.menu-list')  //  모두 가져옴

    - 유사배열 객체
    - NodeList 는 이터러블하기에 forEach 사용 가능
    - none-live (실시간으로 값이 수정되지 않는다)
    ---------------------------3, 4는 "NodeList" 를 반환


    ==> 1, 2 번은 live 라 사이드 이펙트가 일어날 수 있지만, 접근하는 속도가 빠르다 (live이기에 계산을 하면서 생각하고 써야함)
    ==> 3, 4 번은 편의성이 좋다 (none-live 이기에 많이 생각할 필요 없음) (선택자로 접근하기 때문에 해석하는데 시간이 좀 더 걸린다)

    ** 편한 거 사용하면 되는데, 아래 3,4번 사용하는 경우가 조금 더 많다 (편의성 때문) (사이드이펙트 걱정하지 않아도 된다)

---------------------------------------------------------------------------------------


ex) let $divs = document.querySelectorAll("div")

DOM 객체를 담을 때는 변수 앞에 달러($)를 담을 것이다 --> 개발자들의 "컨벤션" 이다

DOM API 는 해당 요소가 가지고 있는 속성의 값에 접근할 수 있으며,
해당 값을 수정하는 것도 가능하다

이를 넘어서 해당 요소를 복사하거나 요소를 생성하거나 자식의 요소에 추가할 수도 있다
    -> 즉,  html 요소에 DOM API 를 통해서 내 마음대로 명령내릴 수 있다


---------------------------------------------------------------------------------------

1. 자바스크립트로 알고리즘 문제 풀이 열심히 하기

---------------------------------------------------------------------------------------


DOM API 접근하는 방법 (특정한 돔에 접근하기 위해서 존재한다)

    - getElement  -->  단수
    - getElements  -->  복수 (HTMLCollection : 유사배열객체), live(실시간으로 돔의 변경 상태를 반영한다)
                                        유사배열객체이기 때문에, Array.from() 같은 것을 사용해주면 배열에 있는 내장함수 등을 사용할 수 있다

    const $div = document.getElementsByClassName("menu-item") --> 처음에 가져왔을 때 length가 4개
    $div[0] 이렇게 하나의 클래스네임을 삭제한다면 -- div --> 3개
    console.log($div.length)  //  3개  -->  재할당(다른 변수에 선언)을 하지 않아도 값이 변한다 (live 이기 때문) (원래는 4여야함)
                                                            -->  재할당하지 않아도 실시간으로 상태가 반영된다 --> 이것을 live 라 한다

-------------------------------------------

    - querySelector  -->  단수
    - querySelectorAll  -->  복수 (NodeList) 유사배열 "객체" 이지만 순회가능해서 그냥 forEach 사용 가능, non-live(정적이다)

-------------------------------------------